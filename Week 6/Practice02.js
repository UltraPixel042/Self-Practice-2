// üíª Functional Programming Practice in JavaScript
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 8 ‡∏Ç‡πâ‡∏≠

// üß† ‡∏Ç‡πâ‡∏≠ 1: Closure Counter
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createCounter(start) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const counter = createCounter(10);
// console.log(counter()); // 11
// console.log(counter()); // 12
// console.log(counter()); // 13
function createCounter(n) {
  let final = n;
  return function () {
    final++;
    return final;
  };
}

const counter = createCounter(10);
console.log(counter());
console.log(counter());
console.log(counter());
console.log(counter());

// üîÅ ‡∏Ç‡πâ‡∏≠ 2: Nested Function ‚Äì Power Calculator
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô power(base) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô raise(exponent)
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const pow2 = power(2);
// console.log(pow2(3)); // 8
// console.log(pow2(5)); // 32
function power(base) {
  let total = base;
  return function (p) {
    return total ** p;
  };
}
const pow2 = power(2);
console.log(pow2(3));
console.log(pow2(5));

// ‚öôÔ∏è ‡∏Ç‡πâ‡∏≠ 3: Function Types
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô 3 ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏Ñ‡∏∑‡∏≠ "Hello <name>"
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// console.log(greet("Alice"));
// console.log(greetExpr("Bob"));
// console.log(greetArrow("Charlie"));
function greet(name) {
  return `Hello ${name}`;
}

const greetExpr = function (name) {
  return `Hello ${name}`;
};
greetExpr();

function greetNested(name) {
  function hello() {
    return name;
  }
  return `Hello ${hello()}`;
}

console.log(greet("Alice"));
console.log(greetExpr("Bob"));
console.log(greetNested("Charlie"));

// üß© ‡∏Ç‡πâ‡∏≠ 4: Higher-Order Function ‚Äì Custom Filter
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô myFilter(arr, fn) ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô .filter()
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const nums = [1, 2, 3, 4, 5];
// console.log(myFilter(nums, n => n % 2 === 0)); // [2,4]
function myFilter(arr, fn) {
  let result = [];
  for (let item of arr) {
    if (fn(item)) {
      result.push(item);
    }
  }
  return result;
}
const nums = [1, 2, 3, 4, 5];
console.log(myFilter(nums, (n) => n % 2 === 0));

// ‚ö° ‡∏Ç‡πâ‡∏≠ 5: Function Composition
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô compose(f, g) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ f(g(x))
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const double = x => x * 2;
// const square = x => x * x;
// const doubleThenSquare = compose(square, double);
// console.log(doubleThenSquare(3)); // 36
function compose(f, g) {
  return function (x) {
    return f(g(x));
  };
}

const double = (x) => x * 2;
const square = (x) => x * x;
const doubleThenSquare = compose(square, double);
console.log(doubleThenSquare(3));

// üßò ‡∏Ç‡πâ‡∏≠ 6: Pure Function & Immutability
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addItemPure(list, item) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô array ‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const items = ["A", "B"];
// const newItems = addItemPure(items, "C");
// console.log(items);    // ["A", "B"]
// console.log(newItems); // ["A", "B", "C"]
function addItemPure(list, item) {
  return [...list, item];
}
const items = ["A", "B"];
const newItems = addItemPure(items, "C");
console.log(items);
console.log(items);
console.log(newItems);

// üßÆ ‡∏Ç‡πâ‡∏≠ 7: Functional Programming
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ö‡∏ö functional programming ‡πÄ‡∏û‡∏∑‡πà‡∏≠:
// - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡∏à‡∏≤‡∏Å array
// - ‡∏Ñ‡∏π‡∏ì‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢ 3
// - ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const nums = [1,2,3,4,5,6];
// expected result = (2*3 + 4*3 + 6*3) = 36
function Programming(arr) {
  return arr
    .filter((n) => n % 2 === 0)
    .map((n) => n * 3)
    .reduce((sum, n) => sum + n, 0);
}
const numbers = [1, 2, 3, 4, 5, 6];
console.log(Programming(numbers));

// üß± ‡∏Ç‡πâ‡∏≠ 8: Combine Everything (Challenge)
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô makeMultiplier(n) ‡∏ó‡∏µ‡πà:
// 1. ‡πÄ‡∏õ‡πá‡∏ô closure
// 2. ‡∏Ñ‡∏∑‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö array
// 3. ‡πÉ‡∏ä‡πâ functional programming (map, reduce)
// 4. ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ n
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const times3 = makeMultiplier(3);
// console.log(times3([1,2,3,4])); // 30
function makeMultiplier(num) {
  return function (arr) {
    return arr.map((n) => n * num).reduce((sum, n) => sum + n, 0);
  };
} 
const times3 = makeMultiplier(3);
console.log(times3([1, 2, 3, 4]));
